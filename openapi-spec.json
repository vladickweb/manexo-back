{
  "openapi": "3.0.0",
  "paths": {
    "/users": {
      "post": {
        "operationId": "UserController_create",
        "summary": "Create a new user",
        "description": "Creates a new user account with the provided information",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "email must be an email",
                        "firstName should not be empty"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "UserController_findAll",
        "summary": "Get all users",
        "description": "Retrieves a list of all users in the system",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UserController_findOne",
        "summary": "Get a user by ID",
        "description": "Retrieves a specific user by their ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "UserController_update",
        "summary": "Update a user",
        "description": "Updates an existing user with new information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserController_remove",
        "summary": "Delete a user",
        "description": "Permanently deletes a user from the system",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/test": {
      "patch": {
        "operationId": "UserController_test",
        "summary": "Test endpoint",
        "description": "Test endpoint for development purposes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "test"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{id}/profile-image": {
      "post": {
        "operationId": "UserController_uploadProfileImage",
        "summary": "Upload profile image",
        "description": "Uploads a profile image for the specified user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile image file (max 5MB)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile image uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile image uploaded successfully"
                    },
                    "imageUrl": {
                      "type": "string",
                      "example": "https://example.com/image.jpg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No file provided or invalid file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "No file provided"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserController_removeProfileImage",
        "summary": "Remove profile image",
        "description": "Removes the profile image for the specified user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile image removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile image removed successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "summary": "Register new user",
        "description": "Creates a new user account with email, password, first name and last name",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User registration data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "email must be an email",
                        "password must be longer than or equal to 6 characters"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "summary": "User login",
        "description": "Authenticates a user with email and password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Login credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid credentials"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "summary": "Refresh access token",
        "description": "Generates a new access token using a valid refresh token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Refresh token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid refresh token"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/me": {
      "get": {
        "operationId": "AuthController_getProfile",
        "summary": "Get user profile",
        "description": "Gets the profile information of the authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/google": {
      "get": {
        "operationId": "AuthController_googleAuth",
        "summary": "Start Google authentication",
        "description": "Redirects the user to Google OAuth page",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth"
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/google/callback": {
      "get": {
        "operationId": "AuthController_googleAuthRedirect",
        "summary": "Google authentication callback",
        "description": "Handles Google OAuth response and redirects to frontend with tokens",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Redirect to frontend with access tokens"
          },
          "401": {
            "description": "Google authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Google authentication failed"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/services": {
      "post": {
        "operationId": "ServiceController_create",
        "summary": "Create a new service",
        "description": "Creates a new service with the provided information",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Service creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Category not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ServiceController_findAll",
        "summary": "Get all services",
        "description": "Retrieves a paginated list of services with optional filtering options",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "subcategoryIds",
            "required": false,
            "in": "query",
            "description": "Filter by subcategory IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "a"
                }
              }
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minPrice",
            "required": false,
            "in": "query",
            "description": "Minimum price filter",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxPrice",
            "required": false,
            "in": "query",
            "description": "Maximum price filter",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "latitude",
            "required": false,
            "in": "query",
            "description": "User latitude for location-based filtering",
            "schema": {
              "example": 37.62332465580069,
              "type": "number"
            }
          },
          {
            "name": "longitude",
            "required": false,
            "in": "query",
            "description": "User longitude for location-based filtering",
            "schema": {
              "example": -0.9851654443962178,
              "type": "number"
            }
          },
          {
            "name": "radius",
            "required": false,
            "in": "query",
            "description": "Search radius in meters for location-based filtering",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "onlyActives",
            "required": false,
            "in": "query",
            "description": "Filter only active services (true) or all services (false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Service"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of services"
                        },
                        "page": {
                          "type": "number",
                          "description": "Current page number"
                        },
                        "limit": {
                          "type": "number",
                          "description": "Items per page"
                        },
                        "totalPages": {
                          "type": "number",
                          "description": "Total number of pages"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/services/{id}": {
      "get": {
        "operationId": "ServiceController_findOne",
        "summary": "Get a service by ID",
        "description": "Retrieves a specific service by its ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ServiceController_update",
        "summary": "Update a service",
        "description": "Updates an existing service with new information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Service update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service or category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ServiceController_remove",
        "summary": "Delete a service",
        "description": "Permanently deletes a service from the system",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Service deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/services/me/published": {
      "get": {
        "operationId": "ServiceController_findMyPublishedServices",
        "summary": "Get user's published services",
        "description": "Retrieves all services published by the authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User's published services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/services/{id}/availability": {
      "get": {
        "operationId": "ServiceController_getServiceAvailability",
        "summary": "Get service availability",
        "description": "Retrieves the availability of a service for a specific date",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "date",
            "required": true,
            "in": "query",
            "description": "Date to check availability (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-15",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service availability retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serviceId": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string"
                    },
                    "availableSlots": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "startTime": {
                            "type": "string",
                            "example": "09:00"
                          },
                          "endTime": {
                            "type": "string",
                            "example": "10:00"
                          },
                          "isAvailable": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/categories": {
      "post": {
        "operationId": "CategoryController_create",
        "summary": "Create a new category",
        "description": "Creates a new category with the provided information",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Category creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name should not be empty",
                        "description should not be empty"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "CategoryController_findAll",
        "summary": "Get all categories",
        "description": "Retrieves a list of all categories in the system",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/categories/{id}": {
      "get": {
        "operationId": "CategoryController_findOne",
        "summary": "Get a category by ID",
        "description": "Retrieves a specific category by its ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Category not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CategoryController_update",
        "summary": "Update a category",
        "description": "Updates an existing category with new information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Category update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Category not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CategoryController_remove",
        "summary": "Delete a category",
        "description": "Permanently deletes a category from the system",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Category deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Category not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/contracts": {
      "post": {
        "operationId": "ContractController_create",
        "summary": "Create new contract",
        "description": "Creates a new contract between a client and a service provider",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Contract creation data including service, client, provider, and time slots",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractDto"
              },
              "examples": {
                "example1": {
                  "summary": "Basic contract creation",
                  "description": "Create a contract for a cleaning service",
                  "value": {
                    "serviceId": 1,
                    "clientId": 2,
                    "providerId": 3,
                    "amount": 150,
                    "clientEmail": "client@example.com",
                    "serviceName": "House Cleaning Service",
                    "timeSlots": [
                      {
                        "date": "2024-01-15",
                        "startTime": "09:00",
                        "endTime": "12:00"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract created successfully with payment link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "amount": {
                          "type": "number",
                          "example": 150
                        },
                        "status": {
                          "type": "string",
                          "example": "PENDING"
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2024-01-10T10:00:00Z"
                        }
                      }
                    },
                    "bookings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "date": {
                            "type": "string",
                            "example": "2024-01-15"
                          },
                          "startTime": {
                            "type": "string",
                            "example": "09:00"
                          },
                          "endTime": {
                            "type": "string",
                            "example": "12:00"
                          },
                          "status": {
                            "type": "string",
                            "example": "PENDING"
                          }
                        }
                      }
                    },
                    "paymentUrl": {
                      "type": "string",
                      "description": "Stripe payment link URL",
                      "example": "https://checkout.stripe.com/pay/cs_test_a1B2c3D4e5F6g7H8i9J0k1L2m3N4o5P6q7R8s9T0u1V2w3X4y5Z6"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or service not available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not available for requested time slots"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service, client, or provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ContractController_findAll",
        "summary": "Get all contracts",
        "description": "Retrieves all contracts in the system (admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All contracts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "amount": {
                        "type": "number",
                        "example": 150
                      },
                      "status": {
                        "type": "string",
                        "example": "PAID"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2024-01-10T10:00:00Z"
                      },
                      "service": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "title": {
                            "type": "string",
                            "example": "House Cleaning Service"
                          }
                        }
                      },
                      "client": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "firstName": {
                            "type": "string",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Doe"
                          }
                        }
                      },
                      "provider": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 3
                          },
                          "firstName": {
                            "type": "string",
                            "example": "Jane"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Smith"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/contracts/my-contracts": {
      "get": {
        "operationId": "ContractController_getMyContracts",
        "summary": "Get user contracts",
        "description": "Retrieves all contracts where the authenticated user is either client or provider",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User contracts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "clientContracts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "amount": {
                            "type": "number",
                            "example": 150
                          },
                          "status": {
                            "type": "string",
                            "example": "PAID"
                          },
                          "timeSlots": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "date": {
                                  "type": "string",
                                  "example": "2024-01-15"
                                },
                                "startTime": {
                                  "type": "string",
                                  "example": "09:00"
                                },
                                "endTime": {
                                  "type": "string",
                                  "example": "12:00"
                                },
                                "status": {
                                  "type": "string",
                                  "example": "CONFIRMED"
                                }
                              }
                            }
                          },
                          "canReview": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      },
                      "description": "Contracts where user is the client"
                    },
                    "providerContracts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "amount": {
                            "type": "number",
                            "example": 200
                          },
                          "status": {
                            "type": "string",
                            "example": "PAID"
                          },
                          "timeSlots": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "date": {
                                  "type": "string",
                                  "example": "2024-01-16"
                                },
                                "startTime": {
                                  "type": "string",
                                  "example": "14:00"
                                },
                                "endTime": {
                                  "type": "string",
                                  "example": "17:00"
                                },
                                "status": {
                                  "type": "string",
                                  "example": "CONFIRMED"
                                }
                              }
                            }
                          },
                          "canReview": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      },
                      "description": "Contracts where user is the provider"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/contracts/webhook": {
      "post": {
        "operationId": "ContractController_handleWebhook",
        "summary": "Stripe webhook handler",
        "description": "Handles Stripe webhook events for payment processing",
        "parameters": [
          {
            "name": "stripe-signature",
            "required": true,
            "in": "header",
            "description": "Stripe webhook signature for verification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "received": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid webhook payload or signature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid webhook signature"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/contracts/{id}": {
      "get": {
        "operationId": "ContractController_findOne",
        "summary": "Get contract by ID",
        "description": "Retrieves a specific contract by its ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Contract ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "amount": {
                      "type": "number",
                      "example": 150
                    },
                    "agreedPrice": {
                      "type": "number",
                      "example": 150
                    },
                    "status": {
                      "type": "string",
                      "example": "PAID"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "title": {
                          "type": "string",
                          "example": "House Cleaning Service"
                        },
                        "description": {
                          "type": "string",
                          "example": "Professional house cleaning service"
                        },
                        "price": {
                          "type": "number",
                          "example": 150
                        }
                      }
                    },
                    "client": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 2
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 3
                        },
                        "firstName": {
                          "type": "string",
                          "example": "Jane"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Smith"
                        },
                        "email": {
                          "type": "string",
                          "example": "jane.smith@example.com"
                        }
                      }
                    },
                    "bookings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "date": {
                            "type": "string",
                            "example": "2024-01-15"
                          },
                          "startTime": {
                            "type": "string",
                            "example": "09:00"
                          },
                          "endTime": {
                            "type": "string",
                            "example": "12:00"
                          },
                          "status": {
                            "type": "string",
                            "example": "CONFIRMED"
                          },
                          "totalPrice": {
                            "type": "number",
                            "example": 150
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Contract not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ContractController_update",
        "summary": "Update contract",
        "description": "Updates an existing contract with new information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Contract ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contract update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractDto"
              },
              "examples": {
                "example1": {
                  "summary": "Update contract status",
                  "description": "Update contract status to PAID",
                  "value": {
                    "status": "PAID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "amount": {
                      "type": "number",
                      "example": 150
                    },
                    "status": {
                      "type": "string",
                      "example": "PAID"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Contract not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ContractController_remove",
        "summary": "Delete contract",
        "description": "Permanently deletes a contract from the system",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Contract ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contract deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Contract not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/reviews": {
      "post": {
        "operationId": "ReviewController_create",
        "summary": "Create a new review",
        "description": "Creates a new review for a service",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Review creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or user already reviewed this service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "User already reviewed this service"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/reviews/service/{id}": {
      "get": {
        "operationId": "ReviewController_findByServiceId",
        "summary": "Get reviews by service",
        "description": "Retrieves all reviews for a specific service",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reviews for the service retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ]
      }
    },
    "/reviews/user/{id}": {
      "get": {
        "operationId": "ReviewController_findByUserId",
        "summary": "Get reviews by user",
        "description": "Retrieves all reviews created by a specific user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reviews by the user retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ]
      }
    },
    "/reviews/service/{id}/stats": {
      "get": {
        "operationId": "ReviewController_getServiceReviewStats",
        "summary": "Get service review statistics",
        "description": "Retrieves review statistics and detailed reviews for a specific service",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service review statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalReviews": {
                      "type": "number",
                      "description": "Total number of reviews",
                      "example": 15
                    },
                    "averageRating": {
                      "type": "number",
                      "description": "Average rating (1-5)",
                      "example": 4.2
                    },
                    "reviews": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "1"
                          },
                          "rating": {
                            "type": "number",
                            "example": 5
                          },
                          "comment": {
                            "type": "string",
                            "example": "Excellent service!"
                          },
                          "user": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "example": 1
                              },
                              "firstName": {
                                "type": "string",
                                "example": "John"
                              },
                              "lastName": {
                                "type": "string",
                                "example": "Doe"
                              }
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-15T10:30:00Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Reviews"
        ]
      }
    },
    "/favorites": {
      "post": {
        "operationId": "FavoriteController_create",
        "summary": "Create new favorite",
        "description": "Adds a service to the user's favorites list",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Favorite creation data including service ID",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFavoriteDto"
              },
              "examples": {
                "example1": {
                  "summary": "Add service to favorites",
                  "description": "Add a cleaning service to user favorites",
                  "value": {
                    "serviceId": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Favorite created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        }
                      }
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "title": {
                          "type": "string",
                          "example": "House Cleaning Service"
                        },
                        "description": {
                          "type": "string",
                          "example": "Professional house cleaning"
                        },
                        "price": {
                          "type": "number",
                          "example": 150
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or service already in favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Service already in favorites"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "FavoriteController_findAll",
        "summary": "Get all favorites",
        "description": "Retrieves all favorites in the system (admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All favorites retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2024-01-10T10:00:00Z"
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "firstName": {
                            "type": "string",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "email": {
                            "type": "string",
                            "example": "john.doe@example.com"
                          }
                        }
                      },
                      "service": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "title": {
                            "type": "string",
                            "example": "House Cleaning Service"
                          },
                          "description": {
                            "type": "string",
                            "example": "Professional house cleaning"
                          },
                          "price": {
                            "type": "number",
                            "example": 150
                          },
                          "category": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "Home Services"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/favorites/user/{userId}": {
      "get": {
        "operationId": "FavoriteController_findByUser",
        "summary": "Get user favorites",
        "description": "Retrieves all favorites for a specific user",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User favorites retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2024-01-10T10:00:00Z"
                      },
                      "service": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "title": {
                            "type": "string",
                            "example": "House Cleaning Service"
                          },
                          "description": {
                            "type": "string",
                            "example": "Professional house cleaning"
                          },
                          "price": {
                            "type": "number",
                            "example": 150
                          },
                          "images": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "https://example.com/image1.jpg"
                            }
                          },
                          "provider": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "example": 2
                              },
                              "firstName": {
                                "type": "string",
                                "example": "Jane"
                              },
                              "lastName": {
                                "type": "string",
                                "example": "Smith"
                              },
                              "rating": {
                                "type": "number",
                                "example": 4.8
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/favorites/{id}": {
      "get": {
        "operationId": "FavoriteController_findOne",
        "summary": "Get favorite by ID",
        "description": "Retrieves a specific favorite by its ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Favorite ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        }
                      }
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "title": {
                          "type": "string",
                          "example": "House Cleaning Service"
                        },
                        "description": {
                          "type": "string",
                          "example": "Professional house cleaning service"
                        },
                        "price": {
                          "type": "number",
                          "example": 150
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "https://example.com/image1.jpg"
                          }
                        },
                        "category": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "example": 1
                            },
                            "name": {
                              "type": "string",
                              "example": "Home Services"
                            }
                          }
                        },
                        "provider": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "example": 2
                            },
                            "firstName": {
                              "type": "string",
                              "example": "Jane"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Smith"
                            },
                            "rating": {
                              "type": "number",
                              "example": 4.8
                            },
                            "location": {
                              "type": "object",
                              "properties": {
                                "city": {
                                  "type": "string",
                                  "example": "Madrid"
                                },
                                "country": {
                                  "type": "string",
                                  "example": "Spain"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Favorite not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Favorite not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "FavoriteController_remove",
        "summary": "Remove favorite",
        "description": "Removes a service from the user's favorites list",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Favorite ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Favorite removed successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Favorite not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Favorite not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/availabilities": {
      "post": {
        "operationId": "AvailabilityController_create",
        "summary": "Create a new availability",
        "description": "Creates a new availability slot for the authenticated user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Availability creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAvailabilityDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Availability created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "dayOfWeek must be a number",
                        "startTime must be a valid time"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Availabilities"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "AvailabilityController_findAll",
        "summary": "Get user availabilities",
        "description": "Retrieves all availability slots for the authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of user availabilities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Availability"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Availabilities"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/availabilities/day/{dayOfWeek}": {
      "get": {
        "operationId": "AvailabilityController_findByDayOfWeek",
        "summary": "Get availabilities by day of week",
        "description": "Retrieves availability slots for a specific day of the week (0=Sunday, 1=Monday, etc.)",
        "parameters": [
          {
            "name": "dayOfWeek",
            "required": true,
            "in": "path",
            "description": "Day of week (0-6, where 0 is Sunday)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of availabilities for the specified day retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Availability"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid day of week",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Day of week must be between 0 and 6"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Availabilities"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/availabilities/{id}": {
      "get": {
        "operationId": "AvailabilityController_findOne",
        "summary": "Get availability by ID",
        "description": "Retrieves a specific availability slot by its ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Availability ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Availability retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Availability not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Availability not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Availabilities"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "AvailabilityController_update",
        "summary": "Update availability",
        "description": "Updates an existing availability slot",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Availability ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Availability update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvailabilityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Availability updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Availability not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Availability not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Availabilities"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AvailabilityController_remove",
        "summary": "Delete availability",
        "description": "Permanently deletes an availability slot",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Availability ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Availability deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Availability deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Availability not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Availability not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Availabilities"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/availabilities/batch": {
      "post": {
        "operationId": "AvailabilityController_batchUpdate",
        "summary": "Batch update availabilities",
        "description": "Updates multiple availability slots at once",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Batch availability update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAvailabilityDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Availabilities updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Availability"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "availabilities must be an array",
                        "Invalid availability data"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Availabilities"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/chats": {
      "post": {
        "operationId": "ChatsController_create",
        "summary": "Create new chat",
        "description": "Creates a new chat between the authenticated user and a service provider",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Chat creation data including service ID",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatDto"
              },
              "examples": {
                "example1": {
                  "summary": "Create chat for service",
                  "description": "Start a conversation about a cleaning service",
                  "value": {
                    "serviceId": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "client": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 2
                        },
                        "firstName": {
                          "type": "string",
                          "example": "Jane"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Smith"
                        },
                        "email": {
                          "type": "string",
                          "example": "jane.smith@example.com"
                        }
                      }
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "title": {
                          "type": "string",
                          "example": "House Cleaning Service"
                        },
                        "description": {
                          "type": "string",
                          "example": "Professional house cleaning"
                        },
                        "price": {
                          "type": "number",
                          "example": 150
                        }
                      }
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "content": {
                            "type": "string",
                            "example": "Hello! I would like to book your service."
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2024-01-10T10:00:00Z"
                          },
                          "sender": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "example": 1
                              },
                              "firstName": {
                                "type": "string",
                                "example": "John"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or chat already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Chat already exists for this service"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Service not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ChatsController_findAll",
        "summary": "Get user chats",
        "description": "Retrieves all chats for the authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User chats retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2024-01-10T10:00:00Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2024-01-10T10:00:00Z"
                      },
                      "lastMessage": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 5
                          },
                          "content": {
                            "type": "string",
                            "example": "Perfect! I'll see you tomorrow at 9 AM."
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2024-01-10T15:30:00Z"
                          },
                          "isRead": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      },
                      "unreadCount": {
                        "type": "number",
                        "example": 2
                      },
                      "service": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "title": {
                            "type": "string",
                            "example": "House Cleaning Service"
                          },
                          "price": {
                            "type": "number",
                            "example": 150
                          },
                          "images": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "https://example.com/image1.jpg"
                            }
                          }
                        }
                      },
                      "otherUser": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "firstName": {
                            "type": "string",
                            "example": "Jane"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Smith"
                          },
                          "profileImage": {
                            "type": "string",
                            "example": "https://example.com/profile.jpg"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/chats/{id}": {
      "get": {
        "operationId": "ChatsController_findOne",
        "summary": "Get chat by ID",
        "description": "Retrieves a specific chat by its ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-01-10T10:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-01-10T15:30:00Z"
                    },
                    "client": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "profileImage": {
                          "type": "string",
                          "example": "https://example.com/john.jpg"
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 2
                        },
                        "firstName": {
                          "type": "string",
                          "example": "Jane"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Smith"
                        },
                        "email": {
                          "type": "string",
                          "example": "jane.smith@example.com"
                        },
                        "profileImage": {
                          "type": "string",
                          "example": "https://example.com/jane.jpg"
                        }
                      }
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "title": {
                          "type": "string",
                          "example": "House Cleaning Service"
                        },
                        "description": {
                          "type": "string",
                          "example": "Professional house cleaning service"
                        },
                        "price": {
                          "type": "number",
                          "example": 150
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "https://example.com/image1.jpg"
                          }
                        }
                      }
                    },
                    "messagesCount": {
                      "type": "number",
                      "example": 5
                    },
                    "lastMessageAt": {
                      "type": "string",
                      "example": "2024-01-10T15:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Chat not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/chats/{id}/messages": {
      "get": {
        "operationId": "ChatsController_getMessages",
        "summary": "Get chat messages",
        "description": "Retrieves all messages for a specific chat",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "content": {
                        "type": "string",
                        "example": "Hello! I would like to book your service."
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2024-01-10T10:00:00Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2024-01-10T10:00:00Z"
                      },
                      "isRead": {
                        "type": "boolean",
                        "example": true
                      },
                      "sender": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "firstName": {
                            "type": "string",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "profileImage": {
                            "type": "string",
                            "example": "https://example.com/john.jpg"
                          }
                        }
                      },
                      "receiver": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "firstName": {
                            "type": "string",
                            "example": "Jane"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Smith"
                          },
                          "profileImage": {
                            "type": "string",
                            "example": "https://example.com/jane.jpg"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Chat not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ChatsController_sendMessage",
        "summary": "Send message",
        "description": "Sends a new message in a specific chat",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Message content",
                    "example": "Hello! I would like to book your service."
                  }
                },
                "required": [
                  "content"
                ]
              },
              "examples": {
                "example1": {
                  "summary": "Simple message",
                  "description": "Send a basic text message",
                  "value": {
                    "content": "Hello! I would like to book your service."
                  }
                },
                "example2": {
                  "summary": "Question about service",
                  "description": "Ask about service details",
                  "value": {
                    "content": "What time are you available tomorrow?"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 6
                    },
                    "content": {
                      "type": "string",
                      "example": "Hello! I would like to book your service."
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-01-10T16:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-01-10T16:00:00Z"
                    },
                    "isRead": {
                      "type": "boolean",
                      "example": false
                    },
                    "sender": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "profileImage": {
                          "type": "string",
                          "example": "https://example.com/john.jpg"
                        }
                      }
                    },
                    "receiver": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 2
                        },
                        "firstName": {
                          "type": "string",
                          "example": "Jane"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Smith"
                        },
                        "profileImage": {
                          "type": "string",
                          "example": "https://example.com/jane.jpg"
                        }
                      }
                    },
                    "chat": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "updatedAt": {
                          "type": "string",
                          "example": "2024-01-10T16:00:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Message content cannot be empty"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Chat not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/chats/unread/count": {
      "get": {
        "operationId": "ChatsController_getUnreadMessagesCount",
        "summary": "Get unread messages count",
        "description": "Retrieves the count of unread messages for the authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Unread messages count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unreadCount": {
                      "type": "number",
                      "description": "Number of unread messages",
                      "example": 5
                    },
                    "chatsWithUnread": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "chatId": {
                            "type": "number",
                            "example": 1
                          },
                          "unreadCount": {
                            "type": "number",
                            "example": 2
                          },
                          "lastMessage": {
                            "type": "string",
                            "example": "Perfect! I'll see you tomorrow."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chats"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user-location": {
      "post": {
        "operationId": "UserLocationController_create",
        "summary": "Create user location",
        "description": "Creates a new location record for a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User location creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "latitude must be a number",
                        "longitude must be a number"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "UserLocation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "UserLocationController_findAll",
        "summary": "Get all user locations",
        "description": "Retrieves a list of all user location records",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all user locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLocation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "UserLocation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user-location/{id}": {
      "get": {
        "operationId": "UserLocationController_findOne",
        "summary": "Get user location by ID",
        "description": "Retrieves a specific user location by its ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User location ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User location not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User location not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "UserLocation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "UserLocationController_update",
        "summary": "Update user location",
        "description": "Updates an existing user location with new information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User location ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User location update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserLocationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "latitude must be a number",
                        "longitude must be a number"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User location not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User location not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "UserLocation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserLocationController_remove",
        "summary": "Delete user location",
        "description": "Permanently deletes a user location record",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User location ID",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User location deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User location deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User location not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User location not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "UserLocation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Manexo API",
    "description": "API documentation for Manexo application",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "Email del usuario"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "Contraseña del usuario",
            "minLength": 6
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "Nombre del usuario"
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "Apellido del usuario"
          },
          "picture": {
            "type": "string",
            "example": "https://example.com/picture.jpg",
            "description": "URL de la foto de perfil del usuario"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "Availability": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID único de la disponibilidad",
            "example": 1
          },
          "dayOfWeek": {
            "type": "number",
            "description": "Día de la semana (0-6, donde 0 es domingo)",
            "example": 6
          },
          "startTime": {
            "type": "string",
            "description": "Hora de inicio en formato HH:mm",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "Hora de fin en formato HH:mm",
            "example": "17:00"
          },
          "isActive": {
            "type": "boolean",
            "description": "Estado activo de la disponibilidad",
            "example": true
          },
          "user": {
            "description": "Usuario que ofrece el servicio",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "bookings": {
            "description": "Reservas asociadas a esta disponibilidad",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Booking"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de creación de la disponibilidad",
            "example": "2024-03-20T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de última actualización de la disponibilidad",
            "example": "2024-03-20T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "dayOfWeek",
          "startTime",
          "endTime",
          "isActive",
          "user",
          "bookings",
          "createdAt",
          "updatedAt"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID único del usuario",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "description": "Nombre del usuario",
            "example": "Juan"
          },
          "lastName": {
            "type": "string",
            "description": "Apellido del usuario",
            "example": "Perez"
          },
          "email": {
            "type": "string",
            "description": "Correo electrónico del usuario",
            "example": "usuario@ejemplo.com"
          },
          "password": {
            "type": "string",
            "description": "Contraseña del usuario (encriptada)",
            "example": "********"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar del usuario",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Estado activo del usuario",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de creación del usuario",
            "example": "2024-03-20T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de última actualización del usuario",
            "example": "2024-03-20T12:00:00.000Z"
          },
          "services": {
            "description": "Lista de servicios asociados al usuario",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "availabilities": {
            "description": "Lista de disponibilidades del usuario",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Availability"
            }
          },
          "bookings": {
            "description": "Lista de reservas realizadas por el usuario",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Booking"
            }
          }
        },
        "required": [
          "id",
          "email",
          "password",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "Contract": {
        "type": "object",
        "properties": {}
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID único de la reserva",
            "example": 1
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de la reserva",
            "example": "2024-03-23"
          },
          "startTime": {
            "type": "string",
            "description": "Hora de inicio en formato HH:mm",
            "example": "17:00"
          },
          "endTime": {
            "type": "string",
            "description": "Hora de fin en formato HH:mm",
            "example": "19:00"
          },
          "status": {
            "type": "string",
            "description": "Estado de la reserva",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "CANCELLED",
              "COMPLETED"
            ]
          },
          "client": {
            "description": "Usuario que realiza la reserva",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "provider": {
            "description": "Usuario que proporciona el servicio",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "availability": {
            "description": "Disponibilidad asociada a la reserva",
            "allOf": [
              {
                "$ref": "#/components/schemas/Availability"
              }
            ]
          },
          "service": {
            "description": "Servicio reservado",
            "allOf": [
              {
                "$ref": "#/components/schemas/Service"
              }
            ]
          },
          "contract": {
            "description": "Contrato asociado a la reserva",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contract"
              }
            ]
          },
          "totalPrice": {
            "type": "number",
            "description": "Precio total de la reserva",
            "example": 100
          },
          "notes": {
            "type": "string",
            "description": "Notas adicionales de la reserva",
            "example": "Por favor, traer productos de limpieza"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de creación de la reserva",
            "example": "2024-03-20T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de última actualización de la reserva",
            "example": "2024-03-20T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "date",
          "startTime",
          "endTime",
          "status",
          "client",
          "provider",
          "availability",
          "service",
          "contract",
          "totalPrice",
          "createdAt",
          "updatedAt"
        ]
      },
      "Service": {
        "type": "object",
        "properties": {
          "bookings": {
            "description": "Lista de reservas asociadas al servicio",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Booking"
            }
          }
        }
      },
      "LocationDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitud de la ubicación",
            "example": 19.4326
          },
          "longitude": {
            "type": "number",
            "description": "Longitud de la ubicación",
            "example": -99.1332
          },
          "address": {
            "type": "string",
            "description": "Dirección completa",
            "example": "Avenida Reforma 123, Ciudad de México"
          },
          "streetName": {
            "type": "string",
            "description": "Nombre de la calle",
            "example": "Avenida Reforma"
          },
          "streetNumber": {
            "type": "string",
            "description": "Número de la calle",
            "example": "123"
          },
          "city": {
            "type": "string",
            "description": "Ciudad",
            "example": "Ciudad de México"
          },
          "province": {
            "type": "string",
            "description": "Provincia/Estado",
            "example": "CDMX"
          },
          "postalCode": {
            "type": "string",
            "description": "Código postal",
            "example": "06500"
          },
          "country": {
            "type": "string",
            "description": "País",
            "example": "México"
          }
        },
        "required": [
          "latitude",
          "longitude",
          "address",
          "streetName",
          "streetNumber",
          "city",
          "province",
          "postalCode",
          "country"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Nombre del usuario",
            "example": "John"
          },
          "email": {
            "type": "string",
            "description": "Email del usuario",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Contraseña del usuario",
            "example": "newpassword123"
          },
          "profileImageUrl": {
            "type": "string",
            "description": "Imagen de perfil del usuario",
            "example": "https://example.com/profile.jpg"
          },
          "profileImagePublicId": {
            "type": "string",
            "description": "ID de la imagen de perfil del usuario",
            "example": "1234567890"
          },
          "firstName": {
            "type": "string",
            "description": "Nombre del usuario",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Apellido del usuario",
            "example": "Doe"
          },
          "location": {
            "description": "Ubicación del usuario",
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationDto"
              }
            ]
          }
        }
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "Email del usuario"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "Contraseña del usuario",
            "minLength": 6
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "Nombre del usuario"
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "Apellido del usuario"
          }
        },
        "required": [
          "email",
          "password",
          "firstName",
          "lastName"
        ]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Token de acceso JWT",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refreshToken": {
            "type": "string",
            "description": "Token de refresco JWT",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "type": "object",
            "description": "Información del usuario",
            "example": {
              "id": 1,
              "email": "user@example.com",
              "firstName": "John",
              "lastName": "Doe",
              "createdAt": "2024-01-01T00:00:00.000Z"
            }
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "user"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email del usuario",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Contraseña del usuario",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Token de refresco para obtener un nuevo token de acceso",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "UserProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID del usuario",
            "example": 1
          },
          "email": {
            "type": "string",
            "description": "Email del usuario",
            "example": "user@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "Nombre del usuario",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Apellido del usuario",
            "example": "Doe"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de creación",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "createdAt"
        ]
      },
      "CreateServiceDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Descripción detallada del servicio",
            "example": "Ofrezco servicios de plomería residencial y comercial"
          },
          "radius": {
            "type": "number",
            "description": "Radio de cobertura del servicio",
            "example": 10
          },
          "location": {
            "description": "Ubicación del servicio",
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationDto"
              }
            ]
          },
          "price": {
            "type": "number",
            "description": "Precio del servicio",
            "example": 500
          },
          "subcategory": {
            "type": "number",
            "description": "ID de la subcategoría a la que pertenece el servicio",
            "example": 1
          },
          "requiresAcceptance": {
            "type": "boolean",
            "description": "Indica si el servicio requiere aceptación manual",
            "example": false
          },
          "images": {
            "description": "Lista de URLs de imágenes del servicio",
            "example": [
              "https://example.com/image1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "description",
          "radius",
          "location",
          "price",
          "subcategory"
        ]
      },
      "UpdateServiceDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Descripción detallada del servicio",
            "example": "Ofrezco servicios de plomería residencial y comercial"
          },
          "radius": {
            "type": "number",
            "description": "Radio de cobertura del servicio",
            "example": 10
          },
          "location": {
            "description": "Ubicación del servicio",
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationDto"
              }
            ]
          },
          "price": {
            "type": "number",
            "description": "Precio del servicio",
            "example": 500
          },
          "subcategory": {
            "type": "number",
            "description": "ID de la subcategoría a la que pertenece el servicio",
            "example": 1
          },
          "requiresAcceptance": {
            "type": "boolean",
            "description": "Indica si el servicio requiere aceptación manual",
            "example": false
          },
          "images": {
            "description": "Lista de URLs de imágenes del servicio",
            "example": [
              "https://example.com/image1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Plomería",
            "description": "Nombre de la categoría"
          },
          "description": {
            "type": "string",
            "example": "Servicios de plomería y fontanería",
            "description": "Descripción de la categoría"
          },
          "icon": {
            "type": "string",
            "example": "faucet",
            "description": "Icono de la categoría"
          }
        },
        "required": [
          "name"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID único de la categoría",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Nombre de la categoría",
            "example": "Hogar"
          },
          "description": {
            "type": "string",
            "description": "Descripción de la categoría",
            "example": "Servicios de hogar"
          },
          "icon": {
            "type": "string",
            "description": "Icono de la categoría",
            "example": "home"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de creación de la categoría",
            "example": "2024-03-20T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de última actualización de la categoría",
            "example": "2024-03-20T12:00:00.000Z"
          },
          "subcategories": {
            "description": "Lista de servicios asociados a la categoría",
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Nombre de la categoría",
            "example": "Plomería"
          },
          "description": {
            "type": "string",
            "description": "Descripción de la categoría",
            "example": "Servicios de plomería y fontanería"
          },
          "icon": {
            "type": "string",
            "description": "Icono de la categoría",
            "example": "faucet"
          }
        }
      },
      "CreateContractDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateContractDto": {
        "type": "object",
        "properties": {}
      },
      "CreateReviewDto": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "ID del servicio a evaluar",
            "example": "123"
          },
          "rating": {
            "type": "number",
            "description": "Puntuación del servicio (1-5)",
            "example": 5,
            "minimum": 1,
            "maximum": 5
          },
          "comment": {
            "type": "string",
            "description": "Comentario de la review",
            "example": "Excelente servicio, muy profesional y puntual"
          }
        },
        "required": [
          "serviceId",
          "rating",
          "comment"
        ]
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID único de la review",
            "example": 1
          },
          "rating": {
            "type": "number",
            "description": "Puntuación del servicio (1-5)",
            "example": 5
          },
          "comment": {
            "type": "string",
            "description": "Comentario de la review",
            "example": "Excelente servicio, muy profesional y puntual"
          },
          "user": {
            "description": "Usuario que realiza la review",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "service": {
            "description": "Servicio evaluado",
            "allOf": [
              {
                "$ref": "#/components/schemas/Service"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de creación de la review",
            "example": "2024-03-20T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Fecha de última actualización de la review",
            "example": "2024-03-20T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "rating",
          "comment",
          "user",
          "service",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateFavoriteDto": {
        "type": "object",
        "properties": {}
      },
      "CreateAvailabilityDto": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "number",
            "description": "Día de la semana (0-6, donde 0 es domingo)",
            "example": 6,
            "minimum": 0,
            "maximum": 6
          },
          "startTime": {
            "type": "string",
            "description": "Hora de inicio en formato HH:mm",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "Hora de fin en formato HH:mm",
            "example": "17:00"
          },
          "isActive": {
            "type": "boolean",
            "description": "Estado activo de la disponibilidad",
            "example": true
          }
        },
        "required": [
          "dayOfWeek",
          "startTime",
          "endTime"
        ]
      },
      "UpdateAvailabilityDto": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "number",
            "description": "Día de la semana (0-6, donde 0 es domingo)",
            "example": 6,
            "minimum": 0,
            "maximum": 6
          },
          "startTime": {
            "type": "string",
            "description": "Hora de inicio en formato HH:mm",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "Hora de fin en formato HH:mm",
            "example": "17:00"
          },
          "isActive": {
            "type": "boolean",
            "description": "Estado activo de la disponibilidad",
            "example": true
          }
        }
      },
      "BatchAvailabilityDto": {
        "type": "object",
        "properties": {
          "availabilities": {
            "description": "Array de disponibilidades a actualizar",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAvailabilityDto"
            }
          }
        },
        "required": [
          "availabilities"
        ]
      },
      "CreateChatDto": {
        "type": "object",
        "properties": {}
      },
      "CreateUserLocationDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitud",
            "example": 19.4326
          },
          "longitude": {
            "type": "number",
            "description": "Longitud",
            "example": -99.1332
          },
          "address": {
            "type": "string",
            "description": "Dirección completa",
            "example": "Avenida Reforma 123, Ciudad de México"
          },
          "streetName": {
            "type": "string",
            "description": "Nombre de la calle",
            "example": "Avenida Reforma"
          },
          "streetNumber": {
            "type": "string",
            "description": "Número de la calle",
            "example": "123"
          },
          "city": {
            "type": "string",
            "description": "Ciudad",
            "example": "Ciudad de México"
          },
          "province": {
            "type": "string",
            "description": "Provincia",
            "example": "CDMX"
          },
          "postalCode": {
            "type": "string",
            "description": "Código postal",
            "example": "06500"
          },
          "country": {
            "type": "string",
            "description": "País",
            "example": "México"
          },
          "userId": {
            "type": "number",
            "description": "ID del usuario",
            "example": 1
          }
        },
        "required": [
          "latitude",
          "longitude",
          "address",
          "streetName",
          "streetNumber",
          "city",
          "province",
          "postalCode",
          "country",
          "userId"
        ]
      },
      "UserLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID único de la localización",
            "example": 1
          },
          "latitude": {
            "type": "number",
            "description": "Latitud",
            "example": 19.4326
          },
          "longitude": {
            "type": "number",
            "description": "Longitud",
            "example": -99.1332
          },
          "address": {
            "type": "string",
            "description": "Dirección completa",
            "example": "Avenida Reforma 123, Ciudad de México"
          },
          "streetName": {
            "type": "string",
            "description": "Nombre de la calle",
            "example": "Avenida Reforma"
          },
          "streetNumber": {
            "type": "string",
            "description": "Número de la calle",
            "example": "123"
          },
          "city": {
            "type": "string",
            "description": "Ciudad",
            "example": "Ciudad de México"
          },
          "province": {
            "type": "string",
            "description": "Provincia",
            "example": "CDMX"
          },
          "postalCode": {
            "type": "string",
            "description": "Código postal",
            "example": "06500"
          },
          "country": {
            "type": "string",
            "description": "País",
            "example": "México"
          }
        },
        "required": [
          "id",
          "latitude",
          "longitude",
          "address",
          "streetName",
          "streetNumber",
          "city",
          "province",
          "postalCode",
          "country"
        ]
      },
      "UpdateUserLocationDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitud",
            "example": 19.4326
          },
          "longitude": {
            "type": "number",
            "description": "Longitud",
            "example": -99.1332
          },
          "address": {
            "type": "string",
            "description": "Dirección completa",
            "example": "Avenida Reforma 123, Ciudad de México"
          },
          "streetName": {
            "type": "string",
            "description": "Nombre de la calle",
            "example": "Avenida Reforma"
          },
          "streetNumber": {
            "type": "string",
            "description": "Número de la calle",
            "example": "123"
          },
          "city": {
            "type": "string",
            "description": "Ciudad",
            "example": "Ciudad de México"
          },
          "province": {
            "type": "string",
            "description": "Provincia",
            "example": "CDMX"
          },
          "postalCode": {
            "type": "string",
            "description": "Código postal",
            "example": "06500"
          },
          "country": {
            "type": "string",
            "description": "País",
            "example": "México"
          },
          "userId": {
            "type": "number",
            "description": "ID del usuario",
            "example": 1
          }
        }
      }
    }
  }
}